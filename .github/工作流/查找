#include<stdio.h>
//顺序查找
int Sequential_Search(int *a,int n,int key)
{
	int i;
	for(i=1;i<=n;i++)
	{
		if (a[i]==key)
			return i;
	}
	return 0;
}

//有哨兵顺序查找
int Sequential_Search2(int *a,int n,int key)
{
	int i;
	a[0]=key;			
	i=n;				
	while(a[i]!=key)
	{
		i--;
	}
	return i;			
}

//折半查找 
int Binary_Search(int *a,int n,int key)
{
	int low,high,mid;
	low=1;					
	high=n;					
	while(low<=high)
	{
		mid=(low+high)/2;	
		if (key<a[mid])		
			high=mid-1;		
		else if (key>a[mid])
			low=mid+1;		
		else
		{
			return mid;		
		}
	}
	return 0;
}

// 斐波那契查找 
int Fibonacci_Search(int* a, int n, int key)
{
	int low, high, mid, i, k;
	low = 1;
	high = n;
	k = 0;
	while (n > F[k] - 1)
		k++;
	for (i = n;i < F[k] - 1;i++)
		a[i] = a[n];
	while (low <= high)
	{
		mid = low + F[k - 1] - 1;
		if (key < a[mid])
		{
			high = mid - 1;
			k = k - 1;
		}
		else if (key > a[mid])
		{
			low = mid + 1;
			k = k - 2;
		}
		else
		{
			if (mid <= n)
				return mid;
			else
				return n;
		}
	}
	return 0;
}
// 插值查找 
int Interpolation_Search(int *a,int n,int key)
{
	int low,high,mid;
	low=1;	
	high=n;
	while(low<=high)
	{
		mid=low+ (high-low)*(key-a[low])/(a[high]-a[low]); 
		if (key<a[mid])		
			high=mid-1;		
		else if (key>a[mid])
			low=mid+1;		
		else
			return mid;		
	}
	return 0;
}
//二叉排序树的查找操作
Status SearchBST(BiTree T, int key, BiTree f, BiTree* p)
{
	if (!T)
	{
		*p = f;
		return FALSE;
	}
	else if (key == T->data)
	{
		*p = T;
		return TRUE;
	}
	else if (key < T->data)
		return SearchBST(T->lchild, key, T, p);
	else
		return SearchBST(T->rchild, key, T, p);
}
//二叉排序树的插入操作
Status InsertBST(BiTree* T, int key)
{
	BiTree p, s;
	if (!SearchBST(*T, key, NULL, &p))
	{
		s = (BiTree)malloc(sizeof(BiTNode));
		s->data = key;
		s->lchild = s->rchild = NULL;
		if (!p)
			*T = s;
		else if (key < p->data)
			p->lchild = s;
		else
			p->rchild = s;
		return TRUE;
	}
	else
		return FALSE;
}
//二叉排序树的删除操作
Status DeleteBST(BiTree* T, int key)
{
	if (!*T)
		return FALSE;
	else
	{
		if (key == (*T)->data)
			return Delete(T);
		else if (key < (*T)->data)
			return DeleteBST(&(*T)->lchild, key);
		else
			return DeleteBST(&(*T)->rchild, key);

	}
}
//二叉树的二叉链表结点结构定义 
typedef  struct BiTNode					
{
	int data;							
	struct BiTNode *lchild, *rchild;	
} BiTNode, *BiTree;
int i;
int a[10]={62,88,58,47,35,73,51,99,37,93};
BiTree T=NULL;
for(i=0;i<10;i++)
{
	InsertBST(&T, a[i]);
}
// 二叉树的二叉链表结点结构定义 
typedef  struct BiTNode					
	int data;							
	int bf; 							
	struct BiTNode *lchild, *rchild;	
} BiTNode, *BiTree;


//对以p为根的二叉排序树作右旋处理
//处理之后p指向新的树根结点，即旋转处理之前的左子树的根结点 
void R_Rotate(BiTree *P)
{ 
	BiTree L;
	L=(*P)->lchild; 	
	(*P)->lchild=L->rchild; 
	L->rchild=(*P);
	*P=L; 					
}

//对以P为根的二叉排序树作左旋处理
//处理之后P指向新的树根结点，即旋转处理之前的右子树的根结点0 
void L_Rotate(BiTree *P)
{ 
	BiTree R;
	R=(*P)->rchild; 	
	(*P)->rchild=R->lchild; 
	R->lchild=(*P);
	*P=R; 					
}

#define LH +1 
#define EH 0  
#define RH -1 
void LeftBalance(BiTree* T)
{
	BiTree L, Lr;
	L = (*T)->lchild;
	switch (L->bf)
		 case LH:
			 (*T)->bf = L->bf = EH;
			 R_Rotate(T);
			 break;
		 case RH:
			 Lr = L->rchild;
			 switch (Lr->bf)
			 {
			 case LH: (*T)->bf = RH;
				 L->bf = EH;
				 break;
			 case EH: (*T)->bf = L->bf = EH;
				 break;
			 case RH: (*T)->bf = EH;
				 L->bf = LH;
				 break;
			 }
			 Lr->bf = EH;
			 L_Rotate(&(*T)->lchild);
			 R_Rotate(T);
}

void RightBalance(BiTree *T)
{ 
	BiTree R,Rl;
	R=(*T)->rchild; 					
	switch(R->bf)
	{ 
	 case RH: 
			  (*T)->bf=R->bf=EH;
			  L_Rotate(T);
			  break;
	 case LH: 
			  Rl=R->lchild; 			
			  switch(Rl->bf)			
			  { 						
				case RH: (*T)->bf=LH;
						 R->bf=EH;
						 break;
				case EH: (*T)->bf=R->bf=EH;
						 break;
				case LH: (*T)->bf=EH;
						 R->bf=RH;
						 break;
			  }
			  Rl->bf=EH;
			  R_Rotate(&(*T)->rchild); 
			  L_Rotate(T); 				
	}
}
Status InsertAVL(BiTree* T, int e, Status* taller)
{
	if (!*T)
	{
		*T = (BiTree)malloc(sizeof(BiTNode));
		(*T)->data = e;
		(*T)->lchild = (*T)->rchild = NULL;
		(*T)->bf = EH;
		*taller = TRUE;
	}
	else
	{
		if (e == (*T)->data)
		{
			*taller = FALSE;
			return FALSE;
		}
		if (e < (*T)->data)
		{
			if (!InsertAVL(&(*T)->lchild, e, taller))
				return FALSE;
			if (*taller)
			{
				switch ((*T)->bf)
				{
				case LH:
					LeftBalance(T);
					*taller = FALSE;
					break;
				case EH:
					(*T)->bf = LH;
					*taller = TRUE;
					break;
				case RH:
					(*T)->bf = EH;
					*taller = FALSE;
					break;
				}
			}
		}
		else
		{
			if (!InsertAVL(&(*T)->rchild, e, taller))
				return FALSE;
			if (*taller)
			{
				switch ((*T)->bf)
				{
				case LH:
					(*T)->bf = EH;
					*taller = FALSE;
					break;
				case EH:
					(*T)->bf = RH;
					*taller = TRUE;
					break;
				case RH:
					RightBalance(T);
					*taller = FALSE;
					break;
				}
			}
		}
	}
	return TRUE;
}
int i;
int a[10]={3,2,1,4,5,6,7,10,9,8};
BiTree T=NULL;
Status taller;
for(i=0;i<10;i++)
{
	InsertAVL(&T,a[i],&taller);
}
#define SUCCESS 1
#define UNSUCCESS 0
#define HASHSIZE 12 	
#define NULLKEY -32768 

typedef struct
{
   int *elem; 			
   int count; 			
}HashTable;

int m=0; 				

//初始化散列表 
Status InitHashTable(HashTable *H)
{
	int i;
	m=HASHSIZE;
	H->count=m;
	H->elem=(int *)malloc(m*sizeof(int));
	for(i=0;i<m;i++)
		H->elem[i]=NULLKEY; 
	return OK;
}

//散列函数 
int Hash(int key)
{
	return key % m;
}

// 插入关键字进散列表 
void InsertHash(HashTable *H,int key)
{
	int addr = Hash(key); 				
	while (H->elem[addr] != NULLKEY) 	
		addr = (addr+1) % m; 			
	}
	H->elem[addr] = key; 				
}
//散列表查找关键字 
Status SearchHash(HashTable H,int key,int *addr)
{
	*addr = Hash(key);  									
	while(H.elem[*addr] != key) 						
	{
		*addr = (*addr+1) % m; 								
		if (H.elem[*addr] == NULLKEY || *addr == Hash(key))
			return UNSUCCESS;								
	}
	return SUCCESS;
}
